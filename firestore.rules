/**
 * @file Firebase Security Rules for Reloop Firestore database.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where each user can only
 * read and write their own data. This ensures data privacy and prevents
 * unauthorized access.
 *
 * Data Structure:
 * All user data is stored under the `/users/{userId}` path, where `{userId}`
 * corresponds to the authenticated user's UID. Each document under this path
 * represents a user profile, containing information like email, user type, and
 * impact score.
 *
 * Key Security Decisions:
 * - Users can only create their own profile.
 * - Users can only read and modify their own profile data.
 * - Listing users is not allowed to prevent information disclosure.
 * - The `userType` field is denormalized onto the user document for simpler and
 *   more efficient authorization checks. This avoids the need for additional reads
 *   to determine a user's role.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - User 'test_user' with UID 'test_user' can create their own profile.
     * @allow (get, update, delete) - User 'test_user' with UID 'test_user' can read, update, and delete their own profile.
     * @deny (create) - User 'another_user' with UID 'another_user' cannot create a profile with ID 'test_user'.
     * @deny (get, update, delete) - User 'another_user' with UID 'another_user' cannot read, update, or delete the profile of user 'test_user'.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      // Allow a user to create their own profile if the userId matches their auth UID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;

      // Allow a user to read their own profile.
      allow get: if isSignedIn() && isOwner(userId);

      // Allow a user to update their own profile and ensure that the userId cannot be changed.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow a user to delete their own profile.
      allow delete: if isSignedIn() && isExistingOwner(userId);

      // Prevent listing of all user profiles.
      allow list: if false;
    }

    // --- Helper functions ---
    // Check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Check if the requested user ID matches the authenticated user's UID.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Check if the requested user ID matches the authenticated user's UID and resource exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}