"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { getUpcyclingIdeasAction } from "@/app/actions";
import { Loader2, Sparkles, Lightbulb, Mail } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import type { User } from "@/lib/placeholder-data";

type IdeaButtonProps = {
  materialName: string;
  customizationRequest?: string;
  giver?: User;
};

export default function IdeaButton({ materialName, customizationRequest, giver }: IdeaButtonProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [ideas, setIdeas] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasFetched, setHasFetched] = useState(false);

  const handleFetchIdeas = async () => {
    if (hasFetched) return; 

    setIsLoading(true);
    setError(null);
    setHasFetched(true);
    const result = await getUpcyclingIdeasAction(materialName, customizationRequest);
    if (result.error) {
      setError(result.error);
    } else {
      setIdeas(result.ideas);
    }
    setIsLoading(false);
  };
  
  const onOpenChange = (open: boolean) => {
    setIsOpen(open);
    if (open && !hasFetched) {
      handleFetchIdeas();
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>
        <Button className="w-full bg-accent text-accent-foreground hover:bg-accent/90 mt-2">
          <Sparkles className="mr-2 h-4 w-4" />
          View Details & AI Ideas
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="font-headline text-2xl">Upcycling Ideas for {materialName}</DialogTitle>
          <DialogDescription>
            {customizationRequest 
              ? `AI-generated ideas based on the request: "${customizationRequest}"`
              : "Here are a few creative ideas generated by AI to inspire your next project."
            }
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-4">
          {isLoading && (
            <div className="flex items-center justify-center h-24">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <p className="ml-4">Generating ideas...</p>
            </div>
          )}
          {error && (
            <Alert variant="destructive">
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {!isLoading && ideas.length > 0 && (
            <div>
                <h4 className="font-semibold mb-3 text-lg">âœ¨ AI-Generated Ideas</h4>
                <ul className="space-y-3">
                {ideas.map((idea, index) => (
                    <li key={index} className="flex items-start">
                    <Lightbulb className="h-5 w-5 text-yellow-500 mr-3 mt-1 flex-shrink-0" />
                    <span>{idea}</span>
                    </li>
                ))}
                </ul>
            </div>
          )}
           {giver && (
            <div>
                <h4 className="font-semibold mb-3 text-lg">Contact Giver</h4>
                 <Button asChild variant="outline" className="w-full">
                    <a href={`mailto:${giver?.email}?subject=Inquiry about ${materialName}`}>
                        <Mail className="mr-2 h-4 w-4" />
                        Contact {giver.name}
                    </a>
                </Button>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
